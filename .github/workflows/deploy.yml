name: Deploy Infrastructure

on:
  push:
    branches: [main]
    paths-ignore:
      - 'ansible/hello.txt'
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action'
        required: true
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy
          - plan

jobs:
  setup-backend:
    runs-on: ubuntu-latest
    outputs:
      bucket-name: ${{ steps.backend.outputs.bucket-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Find or Create S3 bucket
        id: backend
        run: |
          BUCKET_NAME=$(aws s3api list-buckets --query "Buckets[?starts_with(Name, 'terraform-state-')].Name" --output text | head -n1)

          if [ -z "$BUCKET_NAME" ]; then
            BUCKET_NAME="terraform-state-$(date +%s)-${{ github.repository_owner }}"
            BUCKET_NAME=$(echo "$BUCKET_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')

            echo "Creating new S3 bucket: $BUCKET_NAME"
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region us-east-1
            aws s3api put-bucket-versioning --bucket "$BUCKET_NAME" --versioning-configuration Status=Enabled
            aws s3api put-public-access-block --bucket "$BUCKET_NAME" --public-access-block-configuration \
              "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
            aws s3api put-bucket-encryption --bucket "$BUCKET_NAME" --server-side-encryption-configuration \
              '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}'
          else
            echo "Found existing bucket: $BUCKET_NAME"
          fi

          echo "bucket-name=$BUCKET_NAME" >> $GITHUB_OUTPUT

      - name: Create DynamoDB table for locking
        run: |
          TABLE_NAME="terraform-state-lock"
          if ! aws dynamodb describe-table --table-name "$TABLE_NAME" 2>/dev/null; then
            echo "Creating DynamoDB table: $TABLE_NAME"
            aws dynamodb create-table \
              --table-name "$TABLE_NAME" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1
            aws dynamodb wait table-exists --table-name "$TABLE_NAME"
          fi

  terraform:
    needs: setup-backend
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_key_name: "devops-key"
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_aws_region: "us-east-1"
      TF_VAR_instance_type: "t2.micro"

    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.6.6

      - name: Create backend config
        working-directory: terraform
        run: |
          cat > backend.tf <<EOF
          terraform {
            backend "s3" {
              bucket         = "${{ needs.setup-backend.outputs.bucket-name }}"
              key            = "terraform/terraform.tfstate"
              region         = "us-east-1"
              dynamodb_table = "terraform-state-lock"
              encrypt        = true
            }
          }
          EOF

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.event.inputs.action != 'destroy' && github.event.inputs.action != 'plan'
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        working-directory: terraform
        run: terraform destroy -auto-approve

      - name: Save Terraform outputs
        if: github.event.inputs.action != 'destroy' && github.event.inputs.action != 'plan'
        id: tf_outputs
        working-directory: terraform
        run: |
          echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT
          echo "load_balancer_dns=$(terraform output -raw load_balancer_dns)" >> $GITHUB_OUTPUT

  ansible:
    needs: [setup-backend, terraform]
    runs-on: ubuntu-latest
    if: github.event.inputs.action != 'destroy' && github.event.inputs.action != 'plan'

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: hashicorp/setup-terraform@v3.1.2
        with:
          terraform_version: 1.6.6

      - name: Get Terraform outputs
        id: tf_outputs
        working-directory: terraform
        run: |
          cat > backend.tf <<EOF
          terraform {
            backend "s3" {
              bucket         = "${{ needs.setup-backend.outputs.bucket-name }}"
              key            = "terraform/terraform.tfstate"
              region         = "us-east-1"
              dynamodb_table = "terraform-state-lock"
              encrypt        = true
            }
          }
          EOF
          terraform init
          echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT

      - name: Save SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ansible/ec2_key.pem
          chmod 600 ansible/ec2_key.pem

      - name: Create Ansible inventory
        run: |
          echo "[webserver]" > ansible/inventory.ini
          echo "${{ steps.tf_outputs.outputs.public_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=ansible/ec2_key.pem ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> ansible/inventory.ini

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Wait for EC2 to be ready
        run: |
          for i in {1..30}; do
            if ssh -o StrictHostKeyChecking=no -i ansible/ec2_key.pem ubuntu@${{ steps.tf_outputs.outputs.public_ip }} echo "ready"; then
              break
            fi
            sleep 10
          done

      - name: Run Ansible Playbook
        run: ansible-playbook -i ansible/inventory.ini ansible/playbook.yml